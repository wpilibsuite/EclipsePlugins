plugins {
    id "edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin" version "1.0"
}

def niPropertiesSource = file('ni_image.properties')
def niPropertiesSpec = copySpec {
    from niPropertiesSource
}

task generateNiImageProperties() {
    group = 'Build'
    description = 'Generates ni_image.properties.'
    def cppPropFile = file('edu.wpi.first.wpilib.plugins.cpp/src/main/resources/cpp-zip/ant/')
    def javaPropFile = file('edu.wpi.first.wpilib.plugins.java/src/main/resources/java-zip/ant/')

    inputs.file niPropertiesSource
    outputs.files cppPropFile, javaPropFile

    doLast {
        [cppPropFile, javaPropFile].each { dest ->
            copy {
                with niPropertiesSpec
                into dest
            }
        }
    }
}

apply from: 'maven_commands.gradle'

executeMaven.mustRunAfter generateNiImageProperties

def generatedVersionFile = file('generated_version')

task updateDependencies() {
    group = 'Build'
    description = 'Updates the versions of all edu.wpi.first.*:* dependencies to the latest version available.'
    dependsOn updateWPILibVersionCommand, updateDependencyVersionsCommand, executeMaven

    doLast {
        if (!generatedVersionFile.exists()) {
            generatedVersionFile.createNewFile()
        }
    }
}

task build() {
    group = 'Build'
    description = 'Assembles this project.'
    dependsOn generateNiImageProperties, addPackageCommand, executeMaven

    // If this is an official build, or if we have never updates the dependencies (ie, this is a fresh clone), or if
    // the user has specified always update dependencies, we update the version of the plugin and of our dependencies
    if (WPILibVersion.releaseType.toString().equalsIgnoreCase('official') || generatedFileCheck(generatedVersionFile)) {
        dependsOn updateDependencies
    }
}

task assemble() {
    group = 'Build'
    description = 'Assembles the outputs of this project.'
    dependsOn build
}

task check() {
    group = 'Verification'
    description = 'Runs all checks.'
    dependsOn assemble
}

task mvnClean() {
    group = 'Build'
    description = 'Runs a \'mvn clean\'.'
    dependsOn executeMaven, addCleanCommand
}

task clean(type: Delete) {
    group = 'Build'
    description = 'Deletes the built artifacts.'
    dependsOn mvnClean
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

// If the generatedVersionFile doesn't exist, or if it's content is 'always generate' ignoring case, then return true.
def generatedFileCheck(generatedVersionFile) {
    if (generatedVersionFile.exists()) {
        def content = generatedVersionFile.text
        return content.equalsIgnoreCase('always generate')
    } else {
        return true
    }
}
