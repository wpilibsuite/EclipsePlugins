import org.gradle.internal.os.OperatingSystem

def niPropertiesSource = file('ni_image.properties')
def niPropertiesSpec = copySpec {
    from niPropertiesSource
}

task generateNiImageProperties() {
    group = 'Build'
    description = 'Generates ni_image.properties'
    def cppPropFile = file('edu.wpi.first.wpilib.plugins.cpp/src/main/resources/cpp-zip/ant/')
    def javaPropFile = file('edu.wpi.first.wpilib.plugins.java/src/main/resources/java-zip/ant/')

    inputs.file niPropertiesSource
    outputs.files cppPropFile, javaPropFile

    doLast {
        [cppPropFile, javaPropFile].each { dest ->
            copy {
                with niPropertiesSpec
                into dest
            }
        }
    }
}

task build(type: Exec) {
    group = 'Build'
    description = 'Assembles this project.'
    executable getMvn()
    args 'package'
    dependsOn generateNiImageProperties
}

task assemble() {
    group = 'Build'
    description = 'Assembles the outputs of this project.'
    dependsOn build
}

task check() {
    group = 'Verification'
    description = 'Runs all checks.'
    dependsOn assemble
}

task mvnClean(type: Exec) {
    group = 'Build'
    description = 'Runs a \'mvn clean\'.'
    executable getMvn()
    args 'clean'
}

task clean(type: Delete) {
    group = 'Build'
    description = 'Deletes the built artifacts.'
    dependsOn mvnClean
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

def getMvn() {
    if (OperatingSystem.current().isWindows()) {
        return 'mvn.cmd'
    } else {
        return 'mvn'
    }
}
