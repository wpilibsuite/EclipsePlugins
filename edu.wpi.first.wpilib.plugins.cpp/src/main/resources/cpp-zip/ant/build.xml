<?xml version="1.0" encoding="UTF-8"?>

<project name="athena-project-build" default="deploy">
  <property file="${user.home}/wpilib/cpp/${version}/ant/ni_image.properties"/>

  <!-- Load Tasks -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${wpilib.ant.dir}/ant-contrib.jar"/>
    </classpath>
  </taskdef>
  <taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="${classloadertask.jar}"/>
  <classloader loader="system" classpath="${jsch.jar}"/>
  <typedef resource="com/github/judoole/webdav/jackrabbit-webdav-tasks.xml">
    <classpath>
      <pathelement location="${wpilib.ant.dir}/jackrabbit-webdav-anttasks-0.5.jar"/>
      <pathelement location="${wpilib.ant.dir}/jakarta-commons-httpclient.jar"/>
      <pathelement location="${wpilib.ant.dir}/jakarta-commons-codec.jar"/>
      <pathelement location="${wpilib.ant.dir}/jackrabbit-webdav-2.7.0.jar"/>
      <pathelement location="${wpilib.ant.dir}/slf4j-api-1.7.3.jar"/>
      <pathelement location="${wpilib.ant.dir}/jakarta-commons-logging.jar"/>
    </classpath>
  </typedef>

  <target name="clean" description="Clean up all build and distribution artifacts.">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <!-- Targets -->

  <target name="get-target-ip">
    <property name="ant.enable.asserts" value="true"/>
    <assert name="team-number" exists="true" message="Team number not set. Go to Window->Preferences->WPILib Preferences to set it."/>

    <echo>Finding roboRIO, please ignore any [hostinfo] error messages</echo>
    <var name="target" unset="true"/>
    <trycatch>
      <try>
        <parallel failonany="true">
          <sequential>
            <echo>Trying mDNS: roboRIO-${team-number}-FRC.local</echo>
            <hostinfo prefix="targethost_local" host="roboRIO-${team-number}-FRC.local" />
            <if>
              <not>
                <equals arg1="${targethost_local.ADDR4}" arg2="0.0.0.0"/>
              </not>
              <then>
                <echo>Resolved mDNS to ${targethost_local.ADDR4}</echo>
                <if>
                  <socket server="${targethost_local.ADDR4}" port="80"/>
                  <then>
                    <property name="target" value="${targethost_local.ADDR4}"/>
                    <fail>${targethost_local.ADDR4}</fail>
                  </then>
                </if>
              </then>
            </if>
          </sequential>
          <sequential>
            <echo>Trying DNS: roboRIO-${team-number}-FRC.lan</echo>
            <hostinfo prefix="targethost_lan" host="roboRIO-${team-number}-FRC.lan" />
            <if>
              <not>
                <equals arg1="${targethost_lan.ADDR4}" arg2="0.0.0.0"/>
              </not>
              <then>
                <echo>Resolved DNS to ${targethost_lan.ADDR4}</echo>
                <if>
                  <socket server="${targethost_lan.ADDR4}" port="80"/>
                  <then>
                    <property name="target" value="${targethost_lan.ADDR4}"/>
                    <fail>${targethost_lan.ADDR4}</fail>
                  </then>
                </if>
              </then>
            </if>
          </sequential>
          <sequential>
            <echo>Trying USB: 172.22.11.2</echo>
            <if>
              <socket server="172.22.11.2" port="80"/>
              <then>
                <property name="target" value="172.22.11.2"/>
                <fail>172.22.11.2</fail>
              </then>
            </if>
          </sequential>
          <sequential>
            <math result="ip.upper" operand1="${team-number}" operation="/" operand2="100" datatype="int"/>
            <math result="ip.lower" operand1="${team-number}" operation="%" operand2="100" datatype="int"/>
            <property name="targethost_ip" value="10.${ip.upper}.${ip.lower}.2"/>
            <echo>Trying Static Ethernet: ${targethost_ip}</echo>
            <if>
              <socket server="${targethost_ip}" port="80"/>
              <then>
                <property name="target" value="${targethost_ip}"/>
                <fail>${targethost_ip}</fail>
              </then>
            </if>
          </sequential>
          <sequential>
            <echo>Trying mDNS: roboRIO-${team-number}-FRC.frc-robot.local</echo>
            <hostinfo prefix="targethost_robot_local" host="roboRIO-${team-number}-FRC.frc-robot.local" />
            <if>
              <not>
                <equals arg1="${targethost_robot_local.ADDR4}" arg2="0.0.0.0"/>
              </not>
              <then>
                <echo>Resolved mDNS to ${targethost_robot_local.ADDR4}</echo>
                <if>
                  <socket server="${targethost_robot_local.ADDR4}" port="80"/>
                  <then>
                    <property name="target" value="${targethost_robot_local.ADDR4}"/>
                    <fail>${targethost_robot_local.ADDR4}</fail>
                  </then>
                </if>
              </then>
            </if>
          </sequential>
          <sequential>
            <sleep seconds="20"/>
            <fail></fail>
          </sequential>
        </parallel>
      </try>
      <catch>
      </catch>
    </trycatch>

    <if>
      <isset property="target"/>
      <then>
        <echo>roboRIO found at ${target}</echo>
      </then>
      <else>
        <assert name="roboRIOFound" message="roboRIO not found, please check that the roboRIO is connected, imaged and that the team number is set properly in Eclipse"/>
      </else>
    </if>
  </target>

  <target name="deploy" depends="get-target-ip, dependencies" description="Deploy the progam and start it running.">
    <deploy-libs libs.name="WPI_Native_Libraries" libs.basedir="${wpilib.lib}" libs.deployDir="${libDeploy.dir}">
      <libs.local>
        <fileset id="wpiNativeLibs.local" dir="${wpilib.lib}">
          <include name="libHALAthena.so"/>
          <include name="libntcore.so"/>
          <include name="libwpiutil.so"/>
          <include name="libopencv*.so.3.1"/>
          <include name="libcscore.so"/>
          <include name="libwpilibc.so"/>
        </fileset>
      </libs.local>
    </deploy-libs>
    <deploy-libs libs.name="User_Libraries" libs.basedir="${userLibs.dir}" libs.deployDir="${libDeploy.dir}">
      <libs.local>
        <fileset dir="${userLibs.dir}">
          <include name="**/*.so"/>
        </fileset>
      </libs.local>
    </deploy-libs>

    <sshexec host="${target}"
         username="${username}"
         password="${password}"
         trust="true"
         failonerror="no"
         command="rm -f ${deploy.dir}/FRCUserProgram" />

    <sshexec host="${target}"
         username="${adminUsername}"
         password="${adminPassword}"
         trust="true"
         command="ldconfig" />

    <echo>[athena-deploy] Copying code over.</echo>
    <jackrabbit username="${adminUsername}" password="${adminPassword}">
      <delete url="http://${target}/files${deploy.dir}/${out}"/>
      <put url="http://${target}/files${deploy.dir}">
        <fileset file="${out.exe}"/>
      </put>
    </jackrabbit>

     <!-- Suppress the exit status so that if no netconsole was running then
          it doesn't show up red on the output. -->
    <sshexec host="${target}"
               username="${adminUsername}"
               password="${adminPassword}"
               trust="true"
               failonerror="false"
               command="killall -q netconsole-host || :"/>


    <deploy-libs libs.name="netconsole-host" libs.basedir="${wpilib.ant.dir}" libs.deployDir="/usr/local/frc/bin">
      <libs.local>
        <fileset id="netconsole.local" dir="${wpilib.ant.dir}">
          <include name="netconsole-host"/>
        </fileset>
      </libs.local>
    </deploy-libs>

    <jackrabbit username="${adminUsername}" password="${adminPassword}">
      <delete url="http://${target}/files${command.dir}robotCommand"/>
      <put url="http://${target}/files${command.dir}">
        <fileset file="${wpilib.ant.dir}/robotCommand"/>
      </put>
    </jackrabbit>

    <echo>[athena-deploy] Starting program.</echo>
    <sshexec host="${target}"
       username="${adminUsername}"
       password="${adminPassword}"
       trust="true"
       failonerror="false"
       command=". /etc/profile.d/natinst-path.sh; chown lvuser ${deploy.dir}/${out}; setcap 'cap_sys_nice=pe' ${deploy.dir}/${out}; chmod a+x ${deploy.dir}/${out}; ${deploy.kill.command}; sync"/>

  </target>

  <target name="debug-prepare" depends="get-target-ip,dependencies,kill-program">
    <deploy-libs libs.name="WPI_Native_Libraries" libs.basedir="${wpilib.lib}" libs.deployDir="${libDeploy.dir}">
      <libs.local>
        <fileset id="wpiNativeLibs.local" dir="${wpilib.lib}">
          <include name="libHALAthena.so"/>
          <include name="libntcore.so"/>
          <include name="libwpiutil.so"/>
          <include name="libopencv*.so.3.1"/>
          <include name="libcscore.so"/>
          <include name="libwpilibc.so"/>
        </fileset>
      </libs.local>
    </deploy-libs>
    <deploy-libs libs.name="User_Libraries" libs.basedir="${userLibs.dir}" libs.deployDir="${libDeploy.dir}">
      <libs.local>
        <fileset dir="${userLibs.dir}">
          <include name="**/*.so"/>
        </fileset>
      </libs.local>
    </deploy-libs>

    <scp file="${wpilib.ant.dir}/locale" todir="${adminUsername}@${target}:/bin/" password="${adminPassword}" trust="true"/>
    <sshexec host="${target}"
             username="${adminUsername}"
             password="${adminPassword}"
             trust="true"
             command="chmod -R +x /bin/locale"
    />
  </target>
    
  <target name="kill-program" depends="get-target-ip" description="Kill the currently running FRC program">
	  <sshexec host="${target}"
		   username="${username}"
		   password="${password}"
		   trust="true"
		   failonerror="false"
		   command=". /etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t"/>
  </target>

  <!-- Simulation support -->
  <target name="simulate">
    <parallel>
      <sequential>
        <echo>[simulate] You may now run Gazebo and your driver station</echo>
  	    <echo>[simulate] Running Code.</echo>
        <exec executable="${sim.exe}"></exec>
      </sequential>
    </parallel>
  </target>

  <target name="dependencies" depends="get-target-ip">
    <property name="ant.enable.asserts" value="true"/>
    <jackrabbit username="${adminUsername}" password="${adminPassword}">
      <get
       url="http://${target}/files/etc/natinst/share"
       file="scs_imagemetadata.ini"
       outFile="scs_imagemetadata.ini"
       overwrite="true"/>
    </jackrabbit>
    <loadfile srcFile="scs_imagemetadata.ini" property="roboRIOSysValues"/>
	<propertyregex property="roboRIOImage" input="${roboRIOSysValues}" regexp="FRC_roboRIO_[0-9]+_v([0-9]+)" select="\1" defaultValue="ImageRegExFail"/>
	<propertyregex property="roboRIOImageYear" input="${roboRIOSysValues}" regexp="FRC_roboRIO_([0-9]+)_v" select="\1" defaultValue="ImageRegExFail"/>
	<assert message="Image of roboRIO does not match plugin. ${line.separator}Allowed image year: ${roboRIOAllowedYear} version: ${roboRIOAllowedImages}. ${line.separator}Actual image year: ${roboRIOImageYear} version ${roboRIOImage}. ${line.separator}RoboRIO needs to be re-imaged or plugins updated.">
        <delete file="scs_imagemetadata.ini"/>
		<bool>
			<and>
				<contains string="${roboRIOAllowedImages}" substring="${roboRIOImage}"/>
				<contains string="${roboRIOAllowedYear}" substring="${roboRIOImageYear}"/>
			</and>
		</bool>
	</assert>
	<echo>roboRIO image version validated</echo>
  </target>

  <!-- libs.name should not contain spaces as it is used to name a file -->
  <macrodef name="deploy-libs">
    <attribute name="libs.name"/>
    <attribute name="libs.basedir"/>
    <attribute name="libs.deployDir"/>
    <element name="libs.local"/>
    <sequential>
      <local name="libs.local.notEmpty"/>
      <local name="libs.local.checksum"/>
      <local name="libs.deployed.checksum"/>
      <local name="libs.local.modified.property"/>
      <local name="libs.remote.modified.property"/>

      <delete file="@{libs.basedir}/@{libs.name}.properties"/>
      <trycatch>
        <try>
          <jackrabbit username="${adminUsername}" password="${adminPassword}">
            <get
             url="http://${target}/files/@{libs.deployDir}"
             file="@{libs.name}.properties"
             outFile="@{libs.basedir}/@{libs.name}.properties"
             overwrite="true"/>
          </jackrabbit>
        </try>
        <catch/>
      </trycatch>
      <restrict id="libs.local.modified">
        <libs.local/>
        <modified update="true"
                  seldirs="true"
                  cache="propertyfile"
                  algorithm="digest"
                  comparator="equal">
          <param name="cache.cachefile" value="@{libs.basedir}/@{libs.name}.properties"/>
          <param name="algorithm.algorithm" value="MD5"/>
        </modified>
      </restrict>

      <pathconvert refid="libs.local.modified" property="libs.local.modified.property" pathsep="," setonempty="false">
        <globmapper from="@{libs.basedir}/*" to="*" handledirsep="true" />
      </pathconvert>

      <if>
        <isset property="libs.local.modified.property"/>
        <then>
          <echo message="Deploying libraries ${line.separator} ${libs.local.modified.property}"/>
          <jackrabbit username="${adminUsername}" password="${adminPassword}">
            <put url="http://${target}/files/tmp">
              <fileset dir="@{libs.basedir}" includes="${libs.local.modified.property}"/>
              <fileset file="@{libs.basedir}/@{libs.name}.properties"/>
            </put>
          </jackrabbit>
          <pathconvert refid="libs.local.modified" property="libs.remote.modified.property" pathsep=" " setonempty="true">
            <globmapper from="@{libs.basedir}/*" to="/tmp/*" handledirsep="true" />
          </pathconvert>
          <sshexec host="${target}"
                   username="${adminUsername}"
                   password="${adminPassword}"
                   trust="true"
                   command="chmod +x ${libs.remote.modified.property} &amp;&amp; mv ${libs.remote.modified.property} /tmp/@{libs.name}.properties @{libs.deployDir} &amp;&amp; ldconfig"
          />
        </then>
      </if>
    </sequential>
  </macrodef>
</project>
