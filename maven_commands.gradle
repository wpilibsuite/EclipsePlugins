import org.gradle.internal.os.OperatingSystem

// This file builds and maintains the list of maven commands

List<String> mavenArgsVersionRun = []
List<String> mavenArgsBuildRun = []

task executeMaven() {
    group = 'Build'
    description = 'Executes all maven commands that have been added to this session.'
    def execList = []
    def mvn = getMvn()

    doFirst {
        if (!mavenArgsVersionRun.empty) {
            execList << generateBuildProperties(mavenArgsVersionRun)
        } else {
            println "No version goals. Skipping version run."
        }

        if (!mavenArgsBuildRun.empty) {
            execList << generateBuildProperties(mavenArgsBuildRun)
        } else {
            println "No build goals. Skipping build run."
        }
    }

    doLast {
        execList.each { argList ->
            exec {
                executable = mvn
                args = argList
            }
        }
    }
}

// Build tasks

task addCleanCommand() {
    group = 'Maven Command'
    description = 'Adds the clean command to the Maven command list.'
    doLast {
        mavenArgsBuildRun << 'clean'
    }
}

task addPackageCommand() {
    group = 'Maven Command'
    description = 'Adds the package command to the Maven command list.'
    doLast {
        mavenArgsBuildRun << 'package'
    }
}

// Version tasks

task updateWPILibVersionCommand() {
    group = 'Maven Command'
    description = 'Adds the version update command to the Maven command list.'
    doLast {
        // In order to get a correct eclipse version, there can't be too few or too many "."s. There needs to
        // be exactly 4. So for official builds, we replace the last "-" with a ".". For local builds, this will
        // cause the tycho-version plugin to error, so we don't set it. This is because local builds are prefixed
        // with "424242."

        def version = WPILibVersion.version
        if (project.hasProperty('jenkinsBuild'))
            version = version.replaceFirst('-', '.')

        mavenArgsVersionRun << 'tycho-versions:set-version' << "-D\"newVersion=$version\""
    }
}

task updateDependencyVersionsCommand() {
    group = 'Maven Command'
    description = 'Add the dependency version update command to the Maven command list.'
    doLast {
        mavenArgsVersionRun << 'versions:use-latest-versions'
    }
}

// General build properties

def generateBuildProperties(args) {
    args << "-D\"repo.local=file://${WPILibVersion.mavenLocalUrl}\"" <<
            "-D\"repo.remote=${WPILibVersion.mavenRemoteUrl}\""
}

def buildTasks = [addCleanCommand, addPackageCommand, generateNiImageProperties]
def versionTasks = [updateWPILibVersionCommand, updateDependencyVersionsCommand]

// Both executeMaven must run after all the add command tasks have run
buildTasks.each { executeMaven.mustRunAfter it }
versionTasks.each { executeMaven.mustRunAfter it }

// The clean command must come first in the args list, and therefore everything else must run after it
addPackageCommand.mustRunAfter addCleanCommand
updateWPILibVersionCommand.mustRunAfter addCleanCommand
updateDependencyVersionsCommand.mustRunAfter addCleanCommand

// addPackageCommand is the last command to be run
addPackageCommand.mustRunAfter updateWPILibVersionCommand
addPackageCommand.mustRunAfter updateDependencyVersionsCommand

def getMvn() {
    if (OperatingSystem.current().isWindows()) {
        return 'mvn.cmd'
    } else {
        return 'mvn'
    }
}